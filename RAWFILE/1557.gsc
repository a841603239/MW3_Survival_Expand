// IW5 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_3C51()
{

}

_id_3C52()
{

}

_id_3C53( var_0 )
{
    if ( self hasperk( var_0, 1 ) )
        return 1;

    if ( !isDefined( self.custom_perks ) )
        self.custom_perks = [];

    if ( self.custom_perks.size >= 2 )
    {
        iprintlnbold( "You already have ^12 PERKS ^7and cannot have any more." );
        return 0;
    }

    switch ( var_0 )
    {
        case "specialty_stalker":
            thread _id_3C61();
            break;
        case "specialty_longersprint":
            thread _id_3C57();
            break;
        case "specialty_fastreload":
            thread _id_3C59();
            break;
        case "specialty_quickdraw":
            thread _id_3C5B();
            break;
        case "specialty_detectexplosive":
            thread _id_3C5D();
            break;
        case "specialty_bulletaccuracy":
            thread _id_3C5F();
            break;
        default:
            thread _id_3C55();
            break;
    }

    self.custom_perks[self.custom_perks.size] = var_0;
    self notify( "give_perk", var_0 );
    return 1;
}

_id_3C54( var_0 )
{
    if ( !self hasperk( var_0, 1 ) )
        return;

    switch ( var_0 )
    {
        case "specialty_stalker":
            thread _id_3C62();
            break;
        case "specialty_longersprint":
            thread _id_3C58();
            break;
        case "specialty_fastreload":
            thread _id_3C5A();
            break;
        case "specialty_quickdraw":
            thread _id_3C5C();
            break;
        case "specialty_detectexplosive":
            thread _id_3C5E();
            break;
        case "specialty_bulletaccuracy":
            thread _id_3C60();
            break;
        default:
            thread _id_3C56();
            break;
    }

    if ( isDefined( self.custom_perks ) )
    {
        var_1 = [];

        for ( var_2 = 0; var_2 < self.custom_perks.size; var_2++ )
        {
            if ( self.custom_perks[var_2] != var_0 )
                var_1[var_1.size] = self.custom_perks[var_2];
        }

        self.custom_perks = var_1;
    }

    self notify( "take_perk", var_0 );
}

_id_3C55()
{

}

_id_3C56()
{

}

_id_3C57()
{
    self setperk( "specialty_longersprint", 1, 0 );
}

_id_3C58()
{
    self unsetperk( "specialty_longersprint", 1 );
}

_id_3C59()
{
    self setperk( "specialty_fastreload", 1, 0 );
}

_id_3C5A()
{
    self unsetperk( "specialty_fastreload", 1 );
}

_id_3C5B()
{
    self setperk( "specialty_quickdraw", 1, 0 );
}

_id_3C5C()
{
    self unsetperk( "specialty_quickdraw", 1 );
}

_id_3C5D()
{
    self setperk( "specialty_detectexplosive", 1, 0 );
}

_id_3C5E()
{
    self unsetperk( "specialty_detectexplosive", 1 );
}

_id_3C5F()
{
    self setperk( "specialty_bulletaccuracy", 1, 0 );
}

_id_3C60()
{
    self unsetperk( "specialty_bulletaccuracy", 1 );
}

_id_3C61()
{
    self setperk( "specialty_stalker", 1, 0 );
}

_id_3C62()
{
    self unsetperk( "specialty_stalker", 1 );
}

_id_3C63()
{
	self.custom_perks = [];
	common_scripts\utility::flag_init( "HUD_giving_perk" );
	common_scripts\utility::flag_init( "HUD_taking_perk" );
	thread _id_3C64();
	thread _id_3C65();
}

_id_3C64()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "give_perk", var_0 );
        common_scripts\utility::flag_set( "HUD_giving_perk" );

        while ( common_scripts\utility::flag( "HUD_taking_perk" ) )
            wait 0.05;

        wait 1;
        common_scripts\utility::flag_clear( "HUD_giving_perk" );
    }
}

_id_3C65()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "take_perk", var_0 );
        common_scripts\utility::flag_set( "HUD_taking_perk" );

        while ( common_scripts\utility::flag( "HUD_giving_perk" ) )
            wait 0.05;

        wait 1;
        common_scripts\utility::flag_clear( "HUD_taking_perk" );
    }
}


monitorShellshockProxy()
{
	self endon( "death" );
	for (;;)
	{
		self waittill( "laststand_effect" );
		thread clearAllCustomPerks();
		self waittill( "revived" );
	}
}

// 当玩家倒地（进入濒死状态）时，移除所有自定义技能及其HUD图标
clearAllCustomPerks()
{
	// 如果玩家没有任何自定义技能，则直接返回
	if ( !isDefined( self.custom_perks ) || self.custom_perks.size == 0 )
		return;

	// 步骤1: 使用引擎命令，移除所有perk的实际游戏效果
	self clearperks();

	// 步骤2: 清空用于追踪自定义技能的数组
	self.custom_perks = [];

	// 步骤3: 遍历并重置所有perk的HUD图标，将它们从屏幕上隐藏
	if ( isDefined( self.perk_huds ) )
	{
		foreach( hud_slot in self.perk_huds )
		{
			if ( hud_slot.in_use )
			{
				hud_slot.icon.alpha = 0.0; // 将图标透明度设为0，使其不可见
				hud_slot.in_use = 0;       // 标记该HUD槽位为“未使用”
				hud_slot.perk_name = "";   // 清空槽位记录的perk名称
			}
		}
	}
}
